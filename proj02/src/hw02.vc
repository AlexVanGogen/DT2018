\import lect02 \hiding (+,*)
\open Nat -- Здесь лежат + и *.

-- I. Задания на рекурсивные определения.

-- 1. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}

\func if (b : Bool) {A : \Type} (t : A) (f : A) : A \elim b
    | true => t
    | false => f

-- 2. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 3. Определите возведение в степень и факториал для натуральных чисел.

{- Supplementary functions to simplify writing tests -}

\func \infixl 4 <$> {A B : \Type} (f : A -> B) (l : List A) : List B \elim l
    | nil => nil
    | cons x xs => cons (f x) (f <$> xs)

\func \infixr 4 <$$> {A B C : \Type} (f : A -> B -> C) (l : List (\Sigma A B)) : List C \elim l
    | nil => nil
    | cons (a, b) xs => cons (f a b) (f <$$> xs)

\func \infixr 5 :: {A : \Type} (x : A) (xs : List A) : List A => cons x xs

{- that's all -}

-- x ^ 2 => (x ^ 1) * x => (x ^ 0) * x * x => 1 * x * x
\func \infixr 8 ^ (x y : Nat) : Nat \elim y
    | 0 => 1
    | suc y => x ^ y * x

\func test-^ : (^) <$$> ((0, 10) :: (5, 0) :: (1, 2) :: (2, 1) :: (3, 4) :: (4, 3) :: nil)
    = (0 :: 1 :: 1 :: 2 :: 81 :: 64 :: nil) => idp

\func fac (x : Nat) : Nat
    | 0 => 1
    | suc x => (suc x) * fac x

\func test-fac : fac <$> (1 :: 2 :: 3 :: 4 :: 5 :: nil) = (1 :: 2 :: 6 :: 24 :: 120 :: nil) => idp

-- 4. Определите mod и gcd.

\func mod (x y : Nat) : Nat => x - (div x y) * y

\func test-mod : mod <$$> ((0, 10) :: (10, 0) :: (1, 2) :: (2, 1) :: (27, 3) :: (27, 4) :: (27, 13) :: nil)
    = (0 :: 10 :: 1 :: 0 :: 0 :: 3 :: 1 :: nil) => idp

\func gcd (x y : Nat) : Nat => gcd' (x + y) x y
    \where
        \func gcd' (s x y : Nat) : Nat \elim s
            | 0 => 0
            | suc s => if (y < 1) x (gcd' s y (mod x y))

\func test-gcd : gcd <$$> ((0, 10) :: (10, 0) :: (1, 2) :: (2, 1) :: (27, 3) :: (27, 4) :: (27, 13) :: (64, 48) :: nil)
    = (10 :: 10 :: 1 :: 1 :: 3 :: 1 :: 1 :: 16 :: nil) => idp

-- 5. Определите (полиморфный) reverse для списков.

\func reverse {A : \Type} (l : List A) : List A
    | nil => nil
    | cons y ys => (reverse ys) ++ (y :: nil)

\func reverse-test1 : reverse (1 :: nil) = (1 :: nil) => idp
\func reverse-test2 : reverse (1 :: 2 :: nil) = (2 :: 1 :: nil) => idp
\func reverse-test3 : reverse (1 :: 2 :: 3 :: nil) = (3 :: 2 :: 1 :: nil) => idp

-- 6. Реализуйте любой алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func length {A : \Type} (l : List A) : Nat
    | nil => 0
    | cons x xs => suc (length xs)

\func take {A : \Type} (n : Nat) (l : List A) : List A
    | 0, l => nil
    | suc n, cons x xs => cons x (take n xs)
    | suc n, nil => nil

\func drop {A : \Type} (n : Nat) (l : List A) : List A
    | 0, l => l
    | suc n, cons x xs => drop n xs
    | suc n, nil => nil

\func merge {A : \Type} (la lb : List A) (less : A -> A -> Bool) : List A \elim la, lb
    | la, nil => la
    | nil, lb => lb
    | cons x xs, cons y ys => if (less x y) (cons x (merge xs (cons y ys) less)) (cons y (merge (cons x xs) ys less))

\func mergesort' {A : \Type} (la : List A) (less : A -> A -> Bool) (s : Nat) : List A \elim la, s
    | nil, _ => nil
    | cons x nil, _ => cons x nil
    | l, suc s => \let | halflen => div (length l) 2 | lh => take halflen l | rh => drop halflen l
                  \in merge (mergesort' lh less s) (mergesort' rh less s) less
    | _, _ => nil

\func sort {A : \Type} (la : List A) (less : A -> A -> Bool) : List A => mergesort' la less (length la)

\func \infixl 5 > (a b : Nat) : Bool => not (a < b)

\func test-sort1 : sort nil (<) = nil => idp
\func test-sort2 : sort (1 :: nil) (<) = (1 :: nil) => idp
\func test-sort3 : sort (1 :: 2 :: nil) (<) = (1 :: 2 :: nil) => idp
\func test-sort4 : sort (2 :: 1 :: nil) (<) = (1 :: 2 :: nil) => idp
\func test-sort5 : sort (2 :: 3 :: 1 :: nil) (<) = (1 :: 2 :: 3 :: nil) => idp
\func test-sort6 : sort (2 :: 3 :: 1 :: nil) (>) = (3 :: 2 :: 1 :: nil) => idp
\func test-sort7 : sort (200 :: 1 :: 201 :: 42 :: 86 :: 51 :: 74 :: nil) (<)
    = (1 :: 42 :: 51 :: 74 :: 86 :: 200 :: 201 :: nil) => idp

-- II. Задания на доказательства.

-- 7. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x
    | true => idp
    | false => idp

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x
    | true => idp
    | false => idp

-- 8. Докажите, что fac 3 равно 6.

\func fac3=6 : fac 3 = 6 => idp

-- 9. Докажите следующие пропозициональные тавтологии.

\data Either (A B : \Type)
  | inl A
  | inr B

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R \elim h
    | inl a => f a
    | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p q => g p))

-- 10. Сформулируйте и докажите следующие пропозициональные тавтологии.

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) (x : \Sigma P Q) : R => f x.1 x.2

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q : \Type} (f : Either P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) => (\lam p => (f (inl p)).2, \lam q => (f (inr q)).1)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} : ((((P -> Q) -> P) -> P) -> Q) -> Q => \lam x => x (\lam y => y (\lam z => x (\lam t => z)))

-- 11. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (1, h 1)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam (fls : P 3) => h (3, fls)

-- 12. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> P x -> Q x) (g : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x)
    => (g.1, h g.1 g.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> Either (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty
    => \lam (p3 : P 3) (q3 : Q 3) => \case h 3 \with { | inl fp => fp p3 | inr fq => fq q3 }

-- III. Задания на модули.

-- 13. Чему равно fileTest (в нормальной форме)? Докажите это.

--\func fileTest-NF => (17, 8, 13, 55, 18, 21)
--
--\func fileTest-equiv-fileTest-NF : fileTest = fileTest-NF => idp
-- [ERROR] lect.vc:372:28: 'foobar' is not a reference to either a definition or a variable

-- 14. Чему равно M5.t''' (в нормальной форме)? Докажите это.

{- M5.t'' => (t'', M2.t'', M4.t'')
          => ((M3_t, M4_t, t', t, functionModule, functionModule.f1, functionModule.f2, functionModule.f3), M2.t'', M4.t'')
          => ((M1.f, functionModule.f1, functionModule.f2, M1.f, functionModule, functionModule.f1, functionModule.f2, functionModule.f3), M1.h, (functionModule.f1, functionModule.f3))
-}

--\func M5t-NF => ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29))
--
--\func M5t-equiv-to-M5t-NF : M5.t''' = M5t-NF => idp
--[ERROR] lect.vc:360:19: 't' is not a reference to either a definition or a variable