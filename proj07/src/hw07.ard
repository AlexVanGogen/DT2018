\import lect07
\open Nat

-- 1. Реализуйте любой алгоритм сортировки, используя with для паттерн матчинга на результате сравнения элементов списка.

\func if (b : Bool) {A : \Type} (t : A) (f : A) : A \elim b
    | true => t
    | false => f

\func \infixl 6 - (x y : Nat) : Nat
  | 0, _ => 0
  | suc x, 0 => suc x
  | suc x, suc y => x - y

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func _div (x y : Nat) => div' x x y
  \where
    \func div' (s x y : Nat) : Nat \elim s
        | 0 => 0
        | suc s => if (x < y) 0 (suc (div' s (x - y) y))

\func \infixr 5 :: {A : \Type} (x : A) (xs : List A) : List A => cons x xs

\func length {A : \Type} (l : List A) : Nat
    | nil => 0
    | cons x xs => suc (length xs)

\func take {A : \Type} (n : Nat) (l : List A) : List A
    | 0, l => nil
    | suc n, cons x xs => cons x (take n xs)
    | suc n, nil => nil

\func drop {A : \Type} (n : Nat) (l : List A) : List A
    | 0, l => l
    | suc n, cons x xs => drop n xs
    | suc n, nil => nil

\func merge {A : \Type} (la lb : List A) (less : A -> A -> Bool) : List A \elim la, lb
    | la, nil => la
    | nil, lb => lb
    | cons x xs, cons y ys => \case less x y \with {
        | true => cons x (merge xs (cons y ys) less)
        | false => cons y (merge (cons x xs) ys less)
    }

\func mergesort' {A : \Type} (la : List A) (less : A -> A -> Bool) (s : Nat) : List A \elim la, s
    | nil, _ => nil
    | cons x nil, _ => cons x nil
    | l, suc s => \let | halflen => _div (length l) 2 | lh => take halflen l | rh => drop halflen l
                  \in merge (mergesort' lh less s) (mergesort' rh less s) less
    | _, _ => nil

\func sort {A : \Type} (la : List A) (less : A -> A -> Bool) : List A => mergesort' la less (length la)

\func \infixl 5 > (a b : Nat) : Bool => not (a < b)

\func test-sort1 : sort nil (<) = nil => idp
\func test-sort2 : sort (1 :: nil) (<) = (1 :: nil) => idp
\func test-sort3 : sort (1 :: 2 :: nil) (<) = (1 :: 2 :: nil) => idp
\func test-sort4 : sort (2 :: 1 :: nil) (<) = (1 :: 2 :: nil) => idp
\func test-sort5 : sort (2 :: 3 :: 1 :: nil) (<) = (1 :: 2 :: 3 :: nil) => idp
\func test-sort6 : sort (2 :: 3 :: 1 :: nil) (>) = (3 :: 2 :: 1 :: nil) => idp
\func test-sort7 : sort (200 :: 1 :: 201 :: 42 :: 86 :: 51 :: 74 :: nil) (<)
    = (1 :: 42 :: 51 :: 74 :: 86 :: 200 :: 201 :: nil) => idp

-- 2. Определите filter через if, а не через with.
--    Докажите для этой версии filter лемму filter-lem.

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x xs => (if (p x) (cons x) (\lam x => x)) (filter' p xs)

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) <= length xs \elim xs
  | nil => unit
  | cons x xs => \case p x \as b \return length ((if b (cons x) (\lam x => x)) (filter' p xs)) <= suc (length xs) \with {
    | true => filter-lem p xs
    | false => <=-helper (filter-lem p xs)
  }

-- 3. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\func head {A : \Type} (xs : List A) (empty : A) : A \elim xs
    | nil => empty
    | cons x _ => x

\func tail {A : \Type} (xs : List A) : List A
    | nil => nil
    | cons _ xs => xs

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
    | decideEq => decideEq dec
    \where
        \func decideEq {A : \Type} (dec : Eq A) (xs ys : List A) : Decide (xs = ys) \elim xs, ys
            | nil, nil => yes idp
            | nil, cons y _ => no (\lam p => suc/=0 (sym (pmap length p)))
            | cons x _, nil => no (\lam p => suc/=0 (pmap length p))
            | cons x xs, cons y ys => \case dec.decideEq x y, decideEq dec xs ys \with {
                | yes pn, yes pl => yes (pmap (\lam z => cons z xs) pn *> pmap (cons y) pl)
                | no pn, _ => no (\lam p => pn (pmap (\lam zs => head zs x) p))
                | _, no pl => no (\lam p => pl (pmap tail p))
            }

-- 4. Докажите, что предикат isEven разрешим.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func even/=odd {k k' : Nat} (p : 2 * k = suc (2 * k')) : Empty \elim k, k'
    | 0, _ => suc/=0 (sym p)
    | suc k, 0 => suc/=0 (pmap pred p)
    | suc k, suc k' => even/=odd {k} {k'} (pmap pred (pmap pred p))

\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

\func isEven-dec : DecPred isEven => \lam n =>
    \case parity n \return Decide (isEven n) \with {
        | even k p => yes (k, p)
        | odd k p => no (\lam p' => even/=odd {p'.1} {k} (sym p'.2 *> p))
    }

-- 5. Докажите, что если равенство элементов A разрешимо, то любой список элементов A либо пуст, либо состоит из повторений одного элемента, либо в A существует два различных элемента.

\func repeat {A : \Type} (n : Nat) (a : A) : List A \elim n
  | 0 => nil
  | suc n => cons a (repeat n a)

\data Result (A : \Type) (xs : List A)
  | empty (xs = nil)
  | repeated (n : Nat) (a : A) (p : xs = repeat n a)
  | A-is-not-trivial (a a' : A) (p : a = a' -> Empty)

--\func all-elements-are-equal {A : \Type} (x : A) (xs : List A) (dec : DecEq A) : Decide (cons x xs = cons x (repeat (length xs) x)) \elim xs
--    | nil => yes idp
--    | cons z zs => \case dec z x, all-elements-are-equal z zs dec \with {
--        | yes pn, yes pl => yes (pmap (cons x) (pl *> pmap (\lam y => cons y (repeat (length zs) y)) pn))
--        | no pn, _ => no (\lam p => pn (pmap (\lam ys => head ys z) (pmap tail p)))
--        | yes pn, no pl => no (\lam p => pl (pmap tail p *> pmap (\lam y => cons y (repeat (length zs) y)) (sym pn)))
--    }

\func lemma {A : \Type} (xs : List A) {dec : DecEq A} : Result A xs \elim xs
    | nil => empty idp
    | cons x xs => \case lemma xs {dec} \with {
        | empty p => repeated 1 x (pmap (cons x) p)
        | repeated n a p => \case dec x a \with {
            | yes p' => repeated (suc n) a (pmap (cons x) p *> pmap (\lam y => cons y (repeat n a)) p')
            | no p' => A-is-not-trivial x a p'
        }
        | A-is-not-trivial a a' p => A-is-not-trivial a a' p
    }

-- 6. Определите view, представляющий число в виде частного и остатка от деления его на произвольное (неотрицательное) число m.
--    Реализуйте функцию деления.

\func *-0-isnull (m : Nat) : 0 * m = 0 \elim m
    | 0 => idp
    | suc m => *-0-isnull m

\func *-1-neutral (m : Nat) : 1 * m = m \elim m
    | 0 => idp
    | suc m => pmap suc (*-1-neutral m)

\func +-assoc (n m k : Nat) : (n + m) + k = n + (m + k) \elim k
  | 0 => idp
  | suc k => pmap suc (+-assoc n m k)

\func +-comm (n m : Nat) : n + m = m + n
  | 0, 0 => idp
  | 0, suc m => pmap suc (+-comm 0 m)
  | suc n, 0 => pmap suc (+-comm n 0)
  | suc n, suc m => pmap suc (+-comm (suc n) m *> pmap suc (sym (+-comm n m)) *> +-comm n (suc m))

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
    | 0 => idp
    | suc n => pmap (\lam x => x + (m + k)) (rdistr n m k)
            *> +-assoc (m * n) (k * n) (m + k)
            *> pmap (\lam x => (m * n) + x) (sym (+-assoc (k * n) m k))
            *> pmap (\lam x => m * n + (x + k)) (+-comm (k * n) m)
            *> pmap (\lam x => (m * n) + x) (+-assoc m (k * n) k)
            *> sym (+-assoc (m * n) m (k * n + k))

\func \infix 4 <== (x y : Nat) : Bool
  | 0, _ => true
  | suc _, 0 => false
  | suc x, suc y => x <== y

\data ModView (m n : Nat)
  | quot-rem (q r : Nat) (t : T (r < m)) (p : n = q * m + r)

\func lemma_6_1 (q m r : Nat) (p : r = m) : q * m + r = suc q * m \elim r
    | 0 => pmap (\lam x => q * x) (sym p) *> sym (pmap (\lam x => suc q * x) (sym p))
    | suc r => sym (rdistr m q 1 *> pmap (\lam x => q * m + x) (*-1-neutral m *> sym p))

\func lemma_6_2' (m : Nat) (t : T (0 < suc m)) (p : 1 = suc m -> Empty) : T (1 < suc m) \elim m
    | 0 => absurd (p idp)
    | suc m => t

\func lemma_6_2 (r m : Nat) (t : T (r < m)) (p : suc r = m -> Empty) : T (suc r < m) \elim r, m
    | 0, suc m => lemma_6_2' m t p
    | suc r, suc m => lemma_6_2 r m t (\lam p' => p (pmap suc p'))
    | 0, 0 => t
    | suc r, 0 => t

\func mod-view (m n : Nat) (t : T (0 < m)) : ModView m n \elim m, n
    | m, 0 => quot-rem 0 0 t (sym (*-0-isnull m))
    | m, suc n => \case mod-view m n t \with {
        | quot-rem q r t' p => \let r' => suc r \in \case NatEq.decideEq r' m \with {
            | yes p' => quot-rem (suc q) 0 t (pmap suc p *> lemma_6_1 q m r' p')
            | no p' => quot-rem q (suc r) (lemma_6_2 r m t' p') (pmap suc p)
        }
    }

\func div (n m : Nat) (t : T (0 < m)) : Nat => \case mod-view m n t \with { | quot-rem q _ _ _ => q }

\func divTest1 : div 10 1 tt = 10 => idp
\func divTest2 : div 10 2 tt = 5 => idp
\func divTest3 : div 10 3 tt = 3 => idp
\func divTest4 : div 10 11 tt = 0 => idp
\func divTest5 : div 200 40 tt = 5 => idp


-- 7. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p => {?}

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P, но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны.
-- Для этого введем эквивалентность предикатов.

\func \infix 4 <-> {A : \Type} (P Q : A -> \Type) => \Pi (x : A) -> \Sigma (P x -> Q x) (Q x -> P x)

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : (FromBoolToDec (FromDecToBool P)).1 <-> P.1 => {?}
