\import lect10
\import helpers \hiding (++, Empty)

-- 1. Определите функцию sscanf.

-- 2. Определите тип бинарных сортированных деревьев.
--    То есть таких деревьев, в которых для любого узла верно, что все элементы в левом поддереве меньше либо равны, чем значение в узле, которое меньше либо равно, чем все элементы в правом поддереве.

\data BinarySearchTree (A : Poset) : \Type
    | bstnil
    | bstnode (key : A)
              (left : BinarySearchTree A)
              (left-inv : NodeKeyNotLessThanLeft key left)
              (right : BinarySearchTree A)
              (right-inv : NodeKeyNotGreaterThanRight key right)

\data NodeKeyNotLessThanLeft {A : Poset} (key : A) (left : BinarySearchTree A) : \Type \elim left
    | bstnil => bstnilL
    | _ => bstnodeL (max left <= {A} key)

\data NodeKeyNotGreaterThanRight {A : Poset} (key : A) (right : BinarySearchTree A) : \Type \elim right
    | bstnil => bstnilR
    | _ => bstnodeR (key <= {A} min right)

\func max {A : Poset} (tree : BinarySearchTree A) : Maybe A \elim tree
    | bstnil => nothing
    | bstnode key _ _ bstnil _ => just key
    | bstnode _ _ _ right _ => max right

\func min {A : Poset} (tree : BinarySearchTree A) : Maybe A \elim tree
    | bstnil => nothing
    | bstnode key bstnil _ _ _ => just key
    | bstnode _ left _ _ _ => min left

{- Define instance of Poset for Nat -}
\func leq-refl (x : Nat) : LessOrEq x x \elim x
    | 0 => z<=n
    | suc x => s<=s (leq-refl x)

\func leq-antisym (x y : Nat) (lxy : LessOrEq x y) (lyx : LessOrEq y x) : x = y \elim x, y, lxy, lyx
    | 0, 0, z<=n, z<=n => idp
    | suc x, suc y, s<=s lxy, s<=s lyx => pmap suc (leq-antisym x y lxy lyx)

\func leq-trans (x y z : Nat) (lxy : LessOrEq x y) (lyz : LessOrEq y z) : LessOrEq x z \elim x, y, z, lxy, lyz
    | 0, _, _, z<=n, _ => z<=n
    | suc x, suc y, suc z, s<=s lxy, s<=s lyz => s<=s (leq-trans x y z lxy lyz)

\instance NatPoset : Poset Nat
    | <= => LessOrEq
    | refl => leq-refl
    | antiSym => leq-antisym
    | trans => leq-trans

\func leq-total (x y : Nat) : Either (LessOrEq x y) (LessOrEq y x) \elim x, y
    | 0, _ => inl z<=n
    | _, 0 => inr z<=n
    | suc x, suc y => \case leq-total x y \with {
        | inl leq => inl (s<=s leq)
        | inr leq => inr (s<=s leq)
    }

\instance NatTotalPoset : TotalPoset Nat
    | <= => LessOrEq
    | refl => leq-refl
    | antiSym => leq-antisym
    | trans => leq-trans
    | totality => leq-total

\func bst1 : BinarySearchTree NatPoset =>
    bstnode 1
            (bstnode 0 bstnil bstnilL bstnil bstnilR)
            (bstnodeL (z<=n : LessOrEq 0 1) : NodeKeyNotLessThanLeft {NatPoset} 1 (bstnode 0 bstnil bstnilL bstnil bstnilR))
            (bstnode 2 bstnil bstnilL bstnil bstnilR)
            (bstnodeR (s<=s (z<=n : LessOrEq 0 2)))

-- 3. Реализуйте функцию сортировки, возвращающую SortedList.

--\func insert-lem {A : TotalPoset} (x y : A) (xs : SortedList A) (headlp : HeadL y xs) (p : y <= x) : HeadL y (insert x xs) \elim xs, headlp
--    | snil, nilL => consL p
--    | scons x' xs p', consL p'' => insert-lem-xs {A} x y x' xs p p' p'' (totality x x')
--    \where \func insert-lem-xs {A : TotalPoset} (x y x' : A) (xs : SortedList A) (p : y <= x) (p' : HeadL x' xs) (p'' : y <= x') (tot : Either (x <= x') (x' <= x)) : HeadL y (insert x (scons x' xs p')) \elim tot
--        | inl x<=x' => consL {?}
--        | inr x'<=x => {?}

\func insert {A : TotalPoset} (x : A) (xs : SortedList A)
    : \Sigma (sxs : SortedList A) (\Pi (y : A) -> (y <= x) -> (HeadL y xs) -> (HeadL y sxs)) \elim xs
    | snil => (scons x snil nilL, \lam _ y<=x _ => consL y<=x)
    | scons x' xs headlp => \case totality {A} x x' \with {
        | inl x<=x' => (
            scons x (scons x' xs headlp) (consL x<=x'),
            \lam _ y<=x _ => consL y<=x
        )
        | inr x'<=x => \let sxsp => insert x xs \in (
            scons x' (sxsp.1) (sxsp.2 x' x'<=x headlp),
            \lam _ _ headlp_y => \case headlp_y \with {
                | consL y<=x' => consL y<=x'
            }
        )
    }

\func sort {A : TotalPoset} (xs : List A) : SortedList A \elim xs
    | nil => snil
    | cons x xs => (insert {A} x (sort xs)).1

\func <=1-2 : LessOrEq 1 2 => s<=s z<=n
\func <=1-3 : LessOrEq 1 3 => s<=s z<=n
\func <=2-3 : LessOrEq 2 3 => s<=s (s<=s z<=n)
\func <=3-5 : LessOrEq 3 5 => s<=s (s<=s (s<=s z<=n))
\func <=5-8 : LessOrEq 5 8 => s<=s (s<=s (s<=s (s<=s (s<=s z<=n))))

\func sort-test-1 : sort (cons 1 (cons 2 (cons 3 nil))) = scons 1 (scons 2 (scons 3 snil nilL) (consL <=2-3)) (consL <=1-2) => idp
\func sort-test-2 : sort (cons 3 (cons 2 (cons 1 nil))) = scons 1 (scons 2 (scons 3 snil nilL) (consL <=2-3)) (consL <=1-2) => idp
\func sort-test-3 : sort (cons 3 (cons 1 (cons 2 nil))) = scons 1 (scons 2 (scons 3 snil nilL) (consL <=2-3)) (consL <=1-2) => idp
\func sort-test-4 : sort (cons 2 (cons 3 (cons 1 nil))) = scons 1 (scons 2 (scons 3 snil nilL) (consL <=2-3)) (consL <=1-2) => idp
\func sort-test-5 : sort (cons 8 (cons 1 (cons 5 (cons 3 nil)))) = scons 1 (scons 3 (scons 5 (scons 8 snil nilL) (consL <=5-8)) (consL <=3-5)) (consL <=1-3) => idp

-- 4. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условияЖ
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs
--