\import lect10

-- 1. Определите функцию sscanf.

-- 2. Определите тип бинарных сортированных деревьев.
--    То есть таких деревьев, в которых для любого узла верно, что все элементы в левом поддереве меньше либо равны, чем значение в узле, которое меньше либо равно, чем все элементы в правом поддереве.

-- 3. Реализуйте функцию сортировки, возвращающую SortedList.

\data SortedList (A : Poset) : \Type
  | snil
  | scons (x : A) (xs : SortedList A) (x <= headDef x xs)

\func headDef {A : Poset} (def : A) (xs : SortedList A) : A \elim xs
  | snil => def
  | scons x _ _ => x

\func sort {A : TotalPoset} (xs : List A) : SortedList A => {?}

-- 4. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условияЖ
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs
--