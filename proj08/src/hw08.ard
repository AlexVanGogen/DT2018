\import lect08
\import helpers \hiding (tt)
\open Nat

\func \infixr 1 :: {A : \Type} (x : A) (xs : List A) => cons x xs

\func idp {A : \Type} {a : A} => path (\lam _ => a)

-- 1. Укажите явно чему равен уровень в каждом из вызовов id' ниже.
--    Напишите явно чему равны типы всех функций idTest*.

\func id' {A : \Type} (a : A) => a

-- Нужно у id' указать не неявный аргумент, а уровень, так же как у Functor и Maybe.
\func idTest1 : \Pi (A : \Type \lp) -> A -> A => id' {\Pi (A : \Type \lp) -> A -> A} (id' {\Pi (A : \Type \lp) -> A -> A} id)
\func idTest2 : \Type \lp -> \Type \lp => id' {\Type \lp -> \Type \lp} (Maybe \lp)
\func idTest3 : \Type (\suc \lp) => id' {\Type (\suc \lp)} (Functor \lp)
\func idTest4 : \Type (\suc \lp) => id' {\Type (\suc \lp)} (Functor \lp (Maybe \lp))
\func idTest5 (f : \Pi {A B : \Type} -> (A -> B) -> Maybe A -> Maybe B) : \Type \lp => id' {\Type \lp} (Functor \lp (Maybe \lp) f)

-- 2. Определите предикат принадлежности элемента списку.

\data List (A : \Type) | nil | cons A (List A)

\data In {A : \Type} (a : A) (xs : List A) \with
    | a, cons x xs => in (a = x)
    | a, cons x xs => maybe_in (In a xs)

\func test-in : In 3 (1 :: 2 :: 3 :: 4 :: nil) => maybe_in (maybe_in (in idp))
-- \func test-in2 : In 3 (1 :: 2 :: nil) => ...

-- 3. Докажите эквивалентность пяти различных определений LessOrEq: lessOrEq, LessOrEq, LessOrEq', LessOrEq'' и LessOrEq'''.

\func prev (n : Nat) : Nat
    | 0 => 0
    | suc n => n

\func proof-1->2 {n m : Nat} (p : lessOrEq n m) : LessOrEq n m \elim n, m, p
    | 0, _, Unit => z<=n
    | suc n, suc m, p => s<=s (proof-1->2 p)

\func proof-2->3 {n m : Nat} (p : LessOrEq n m) : LessOrEq' n m \elim n, m, p
    | 0, _, _ => z<=n' idp
    | suc n, suc m, s<=s p => s<=s' idp idp (proof-2->3 p)

\func lemma_3_1 {n m : Nat} (p : LessOrEq'' n m) : LessOrEq'' (suc n) (suc m) \elim n, m, p
    | 0, 0, <=-refl p => <=-refl (pmap suc p)
    | n, suc m, <=-refl p => <=-refl (pmap suc p)
    | suc n, m, <=-refl p => <=-refl (pmap suc p)
    | 0, suc m, <=-step leq => <=-step (lemma_3_1 leq)
    | suc n, suc m, <=-step leq => <=-step (lemma_3_1 leq)

\func proof-3->4 {n m : Nat} (p : LessOrEq' n m) : LessOrEq'' n m \elim n, m, p
    | 0, 0, p => <=-refl idp
    | 0, suc m, z<=n' p => <=-step (proof-3->4 (z<=n' p))
    | 0, suc m, s<=s' pn pm p => <=-step (proof-3->4 (z<=n' idp))
    | suc n, 0, z<=n' p => absurd (suc/=0 p)
    | suc n, 0, s<=s' pn pm p => absurd (suc/=0 (sym pm))
    | suc n, suc m, z<=n' p => absurd (suc/=0 p)
    | suc n, suc m, s<=s' {n'} {m'} pn pm p => lemma_3_1 (proof-3->4 (
        \let p' => transport (LessOrEq' n') (sym (pmap prev pm)) p
        \in transport (\lam x => LessOrEq' x m) (sym (pmap prev pn)) p'
    ))

\func proof-4->5 {n m : Nat} (p : LessOrEq'' n m) : LessOrEq''' n m \elim n, m, p
    | 0, 0, <=-refl p => (0, zero-left-id *> p)
    | n, suc m, <=-refl p => (0, zero-left-id *> p)
    | suc n, m, <=-refl p => (0, zero-left-id *> p)
    | 0, suc m, <=-step leq => (suc m, idp)
    | suc n, suc m, <=-step leq => \case proof-4->5 leq \with { | (v, p) => (suc v, pmap suc (sym suc-expand *> p)) }

\func proof-5->1 {n m : Nat} (p : LessOrEq''' n m) : lessOrEq n m \elim n, m, p
    | 0, _, _ => unit
    | suc n, 0, (v, p) => suc/=0 p
    | suc n, suc m, (v, p) => proof-5->1 (v, pmap pred p)

-- 4. Определите рефлексивное транзитивное замыкание отношения.
--    То есть ReflTransClosure R -- это минимальное рефлексивное и транзитивное отношение, содержащее R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)

-- 5. Докажите, что если R уже рекфлексивно и транзитивно, то ReflTransClosure R эквивалентно R.

\func \infix 4 <-> {A : \Type} (P Q : A -> A -> \Type) => \Pi (x y : A) -> \Sigma (P x y -> Q x y) (Q x y -> P x y)

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z) : R <-> ReflTransClosure R => {?}

-- 6. Определите предикат xs <= ys на списках, означающий "список xs является подсписком ys".

\data IsSublist {A : \Type} (xs ys : List A) \elim xs, ys
    | nil, _ => ax
    | cons x xs, cons y ys => maybe-head-in (x = y) (IsSublist xs ys)
    | cons x xs, cons y ys => maybe-head-out (IsSublist (cons x xs) ys)

\func \infixl 4 <= {A : \Type} (xs ys : List A) => IsSublist xs ys

\func <=-test1 : (1 :: 2 :: nil) <= (1 :: 2 :: nil) => maybe-head-in idp (maybe-head-in idp ax)
\func <=-test2 : (1 :: 2 :: nil) <= (1 :: 2 :: 3 :: nil) => maybe-head-in idp (maybe-head-in idp ax)
\func <=-test3 : (1 :: 3 :: nil) <= (1 :: 2 :: 3 :: nil) => maybe-head-in idp (maybe-head-out (maybe-head-in idp ax))
-- \func <=-test4 : (1 :: 3 :: nil) <= (1 :: 2 :: nil) => maybe-head-in idp ...

-- 7. Докажите, что filter xs <= xs для любого списка xs.

\func filter {A : \Type} (f : A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x xs => \case f x \with {
        | true => x :: filter f xs
        | false => filter f xs
    }

\func lemma_7_1 {A : \Type} (xs ys : List A) (y : A) (p : xs <= ys) : xs <= (y :: ys) \elim xs
    | nil => ax
    | cons x xs => maybe-head-out p

\func lemma_7_2 {A : \Type} (f : A -> Bool) (x : A) (xs : List A) : filter f (x :: xs) <= (x :: xs) =>
    \let | xs' => filter f xs | xsp => filter<=xs f xs \in
    \case f x \as p \return (\case p \with { | true => (x :: filter f xs) | false => filter f xs }) <= (x :: xs) \with {
        | true => maybe-head-in idp (filter<=xs f xs)
        | false => lemma_7_1 xs' xs x xsp
    }

\func filter<=xs {A : \Type} (f : A -> Bool) (xs : List A) : filter f xs <= xs \elim xs
    | nil => ax
    | cons x xs => lemma_7_2 f x xs
